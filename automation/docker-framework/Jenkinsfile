#!/usr/bin/env groovy

node ('master') {
    git url: 'https://github.com/jfrogtraining/swampup'
    def rtServer = Artifactory.server SERVER_ID
    def rtDocker = Artifactory.docker username: 'jenkins-perf', password: 'jfrog'
    def buildDepInfo = Artifactory.newBuildInfo()
    def buildInfo = Artifactory.newBuildInfo()
    buildDepInfo.env.capture = true
    buildDepInfo.env.collect()
    buildInfo.env.capture = true
    buildInfo.env.collect()

    stage('Dependencies') {
        dir('automation/docker-framework') {
            try {
                println "Gather Java and Tomcat"

                def downloadFrameworkSpec = readFile "${env.WORKSPACE}/automation/docker-framework/framework-download.json"

                def downloadSpec = """{
                         "files": [
                          {
                           "pattern": "tomcat-local/java/jdk-8u91-linux-x64.tar.gz",
                           "target": "jdk/jdk-8-linux-x64.tar.gz",
                           "flat":"true"
                          },
                          {
                           "pattern": "tomcat-local/org/apache/apache-tomcat/apache-tomcat-8.0.32.tar.gz",
                           "target": "tomcat/apache-tomcat-8.tar.gz",
                           "flat":"true"
                          }
                          ]
                        }"""

                buildDepInfo = rtServer.download spec: downloadFrameworkSpec
                if (fileExists('jdk/jdk-8-linux-x64.tar.gz') && fileExists('tomcat/apache-tomcat-8.tar.gz')) {
                    println "Downloaded dependencies"
                } else {
                    println "Missing Dependencies either jdk or tomcat - see listing below:"
                    sh 'ls -d */*'
                    throw new FileNotFoundException("Missing Dependencies")
                }
            } catch (Exception e) {
                println "Caught exception during resolution.  Message ${e.message}"
                throw e
            }
        }
    }
    stage('build') {
        dir ('automation/docker-framework') {
            def tagName = "${ARTDOCKER_REGISTRY}/docker-framework:${env.BUILD_NUMBER}"
            docker.build(tagName)
            buildInfo = rtDocker.push(tagName, REPO)
            buildInfo.append(buildDepInfo)
            rtServer.publishBuildInfo buildInfo
        }
    }

    stage('test') {
        dir('automation/docker-framework/framework-test') {
            def gradleWarDownload = readFile "${env.WORKSPACE}/automation/docker-framework/gradeWar-download.json"
            rtServer.download(gradleWarDownload)
            def tagDockerFramework = "${ARTDOCKER_REGISTRY}/docker-framework-test:${env.BUILD_NUMBER}"
            docker.build(tagDockerFramework)
            if (testFramework(tagDockerFramework)) {
                println "Setting property and promotion"
            } else {
                currentBuild.result = 'UNSTABLE'
                return
            }
        }
    }

    stage('Xray Scan') {
        if (XRAY_SCAN == "YES") {
            def xrayConfig = [
                'buildName'     : env.JOB_NAME,
                'buildNumber'   : env.BUILD_NUMBER,
                'failBuild'     : true
            ]
            def xrayResults = artServer.xrayScan xrayConfig
            echo xrayResults as String
        } else {
            println "No Xray scan performed. To enable set XRAY_SCAN = YES"
        }
    }

    stage ('promote') {
        def promotionConfig = [
              'buildName'          : env.JOB_NAME,
              'buildNumber'        : env.BUILD_NUMBER,
              'targetRepo'         : PROMOTE_REPO,
              'comment'            : 'Framework works with latest version of application to pass test',
              'sourceRepo'         : 'docker-dev-local',
              'status'             : 'Released',
              'includeDependencies': false,
              'copy'               : true
            ]
        rtServer.promote promotionConfig
    }
}

def testFramework (tag) {
    docker.image(tag).withRun('-p 8181:8181') {c ->
        sleep 5
        def stdout = sh(script: 'curl "http://localhost:8181/swampup/"', returnStdout: true)
        if (stdout.contains("Welcome Docker Lifecycle Training")) {
            println "*** Passed Test: " + stdout
            return true
        } else {
            println "*** Failed Test: " + stdout
            return false
        }
    }
}

