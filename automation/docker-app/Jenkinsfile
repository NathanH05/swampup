#!/usr/bin/env groovy

node ('master') {
    git url: 'https://github.com/jfrogtraining/swampup'
    def rtServer = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
    def buildDepInfo = Artifactory.newBuildInfo()
    def buildInfo = Artifactory.newBuildInfo()
    def tagDockerApp
    def rtDocker
    buildDepInfo.env.capture = true
    buildDepInfo.env.collect()
    buildInfo.env.capture = true
    buildInfo.env.collect()

    stage ('Dependencies') {
        dir ('automation/docker-app') {
            try {
                println "Gather Released Docker Framework and Gradle War file"
                def downloadAppSpec = "${env.WORKSPACE}/automation/docker-framework/appmodules-download.json"
                def gradleWarDownload = """{
                    "files": [
                      {
                        "pattern": "gradle-release-local/org/jfrog/example/gradle/webservice/1.1.1/*.war",
                        "target": "war/webservice.war",
                        "props": "unit-test=pass",
                        "flat": "true"
                      }
                    ]
                 }"""
                rtServer.download(gradleWarDownload, buildDepInfo )
            } catch (Exception e) {
                println "Caught Exception during resolution. Message ${e.message}"
                throw e
            }
        }
    }

    stage ('build & deploy') {
        dir ('automation/docker-app') {
            tagDockerApp = "${ARTDOCKER_REGISTRY}/docker-app:${env.BUILD_NUMBER}"
            docker.build(tagDockerApp)
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                rtDocker = Artifactory.docker("${env.USERNAME}", "${env.PASSWORD}")
                rtDocker.push(tagDockerApp, REPO, buildInfo) 
                buildInfo.append(buildDepInfo)
                rtServer.publishBuildInfo buildInfo
             }


        }
     }

     stage ('test') {
        dir('automation/docker-app/app-test') {
            sh 'docker rmi '+tagDockerApp+' || true'
            rtDocker.pull (tagDockerApp)
            if (testApp(tagDockerApp)) {
                  println "Setting property and promotion"
                  sh 'docker rmi '+tagDockerApp+' || true'
             } else {
                  currentBuild.result = 'UNSTABLE'
                  return
             }
        }
     }

     stage('Xray Scan') {
         if (XRAY_SCAN == "YES") {
             def xrayConfig = [
                'buildName'     : env.JOB_NAME,
                'buildNumber'   : env.BUILD_NUMBER,
                'failBuild'     : false
              ]
              def xrayResults = rtServer.xrayScan xrayConfig
              echo xrayResults as String
         } else {
              println "No Xray scan performed. To enable set XRAY_SCAN = YES"
         }
     }

     stage ('promotion') {
        dir('automation/docker-app/app-test') {
            def promotionConfig = [
              'buildName'          : env.JOB_NAME,
              'buildNumber'        : env.BUILD_NUMBER,
              'targetRepo'         : PROMOTE_REPO,
              'comment'            : 'App works with latest released version of gradle swampup app, tomcat and jdk',
              'sourceRepo'         : 'docker-stage-local',
              'status'             : 'Released',
              'includeDependencies': false,
              'copy'               : true
            ]
            rtServer.promote promotionConfig
            reTagLatest ()
        }

        // promote war file from gradle-release to gradle-prod

     }
}

def testApp (tag) {
    docker.image(tag).withRun('-p 8181:8181') {c ->
        sleep 5
        def stdout = sh(script: 'curl "http://localhost:8181/swampup/"', returnStdout: true)
        if (stdout.contains("Welcome Docker Lifecycle Training")) {
            println "*** Passed Test: " + stdout
            return true
        } else {
            println "*** Failed Test: " + stdout
            return false
        }
    }
}

def reTagLatest () {

    def BUILD_NUMBER = env.BUILD_NUMBER
    sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
    sh 'sed -E "s/TARGETREPO/${PROMOTE_REPO}/" retag_out.json > retaga_out.json'
    sh 'cat retaga_out.json'
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def curlString = "curl -u " + env.USERNAME + ":" + env.PASSWORD + " " + SERVER_URL
        def regTagStr = curlString +  "/api/docker/${PROMOTE_REPO}/v2/promote -X POST -H 'Content-Type: application/json' -T retaga_out.json"
        println "Curl String is " + regTagStr
        sh regTagStr
    }
}
